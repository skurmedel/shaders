#version 400

/*
    Emulate a bad CRT screen with an aperture grille or shadow mask.
*/

glsl 
{
    #include "../glsl/gamma_correct.glsl"
    #include "snoise.glsl"
}

#line 1012
animation buffer_in = sequence("../testimgs/pulp/pulp*.png", 25) : filter(bilinear);

/*
    The uniform holding the current time elapsed as a float. It can wrap around
    after a couple of seconds without problems.
*/
#define CRT_TIME_UNIFORM        shadron_Time
/*
    How many horizontal lines we have per screen height.
*/
#define CRT_SCANLINES           480
/*
    The "radius" of the electron beam, this value is usually not meaningful to
    change.
*/
#define CRT_PROJECTION_RADIUS   1
/*
    How far the colour channels are allowed to separate in pixels.
*/
#define CRT_WORST_CONVERGENCE   8.0
/*
    Scales the impurity distance from center factor.
*/
#define CRT_IMPURITY_CENTER_DISTANCE_SCALE  12.0
/*
    The magnitude of the ripple for the tracking error effect.

    Increase to get more wobbly "VHS"/"bad antenna" look.
*/
#define CRT_TRACKING_ERROR_SCALE     0.015 

/*
    How much to blur the UV channels in the YUV processing step.

    This uses mipmapping for cheapo blur, so the quality and steps depend on 
    the settings for the textures.
*/
parameter float uv_blur     = 4   : range(0, 5);
/*
    How much to blur the Y channel in the YUV processing step.

    This uses mipmapping for cheapo blur, so the quality and steps depend on 
    the settings for the textures.
*/
parameter float luma_blur   = 1   : range(0, 5);
/*
    How much "afterimage". This is scaled by the previous frame luminosity at 
    each pixel: the idea is it more strongly affects highlights where the "beam" 
    has higher energy and the phosphor emits for longer.
*/
parameter float ghosting    = 0.8 : range(0, 1);
/*
    A standard black level lift.
*/
parameter float lift        = 0.003 : range(0, 1);
/*
    The distance of the projected screen, this affects the screen warping and
    bending. Set at 1 for a straight image.
*/
parameter float screen_dist = 0.9 : range(0, 2);
/*
    Scales the projected screen in XY for greater control.
*/
parameter vec2  proj_scale   = vec2(0.9) : range(vec2(-2), vec2(2));
/*
    How strong luma noise to add.
*/
parameter float noise_scale = 0.025 : range(0, 1);
/*
    How well the three colour channels converge. A value of 1 means perfectly.

    The shader always have perfect "static convergence", meaning they always 
    converge in the center of the image.
*/
parameter float convergence = 0.65 : range(0, 1);
/*
    Simulates some electrons for a given colour hitting the phosphor for another
    colour, e.g, some of the red beam hits some green phosphors which produces
    incorrect colours.
*/
parameter float impurity = 0.35 : range(0, 1);

/*
    Converts the input to Y'UV.
*/
glsl vec4 crt_yuv(sampler2D self, vec2 pos, float dt)
{
    /* 
        Simulate 8:4:4 chroma subsampling by repeating every fourth pixel fourth
        times in the horizontal. We should probably average these out for a 
        more faithful effect, but too costly for little gain.
    */
    vec2 img_sz = sizeof(buffer_in);
    vec2 pixel_sz = 1.0/img_sz;
    /*
        Changing the moduli here gives a more pronounced effect but for large 
        values it will look horrible.
    */
    int idx = -int(pos.x * img_sz.x) % 4;

    /*
        Some tracking errors (the beam being inconsistent between scans), not 
        very realistic but adds subtle plausible look, it also makes it look a
        bit like bad antenna reception or a shitty VHS. It helps sell the 
        look.
    */
    float tracking_error = CRT_TRACKING_ERROR_SCALE * snoise(pos.yy * 16) * snoise(pos.yy + vec2(7 * CRT_TIME_UNIFORM));
    
    /*
        Our input is sRGB, so lets linearize it (remove the gamma correction),
        first.
    */
    vec3 rgb = srgb_gamma_linearize(texture(buffer_in, pos + idx * vec2(pixel_sz.x, 0) - vec2(0.1) * tracking_error).rgb);

    /*
        Rec601 luma weights. 
        Todo: We should use the ones from luma.glsl.
    */
    vec4 yuv = vec4(1);
    yuv.x = 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b;
    yuv.y = 0.436 * (rgb.b - yuv.x)/(1.0 - 0.114);
    yuv.z = 0.615 * (rgb.r - yuv.x)/(1.0 - 0.299);
    /*
        Apply lift to luma.
    */
    yuv.x = max(lift, yuv.x);

    /*
        Apply some ghosting here. It easier here because we still have access to 
        the luminosity information and can use it to control the ghosting.
    */
    vec4 prev = texture(self, pos, 2);

    return yuv + prev * clamp(ghosting * prev.x, 0.0, 0.7); 
}

feedback buffer_yuv = glsl(crt_yuv, sizeof(buffer_in)): full_range(true), hidden(true), filter(trilinear), map(mirror);

glsl vec3 crt_chroma_blur(sampler2D self, vec2 pos, float dt)
{
    /*
        Blur the chromaticity a bit.
    */
    vec3 blur_uv = texture(buffer_yuv, pos, uv_blur).rgb;
    vec3 yuv = vec3(texture(buffer_yuv, pos, luma_blur).r, blur_uv.g, blur_uv.b);

    /*
        Add some luma noise.
    */
    float noise = snoise(200 * pos + 239 * CRT_TIME_UNIFORM);
    noise *= noise * noise * noise_scale;
    yuv.x += noise * (1.0-yuv.x);

    /*
        We go back to linear sRGB from Y'UV.
    */
    vec3 new = vec3(
        yuv.x + 1.14 * yuv.z,
        yuv.x - 0.395 * yuv.y - 0.581 * yuv.z,
        yuv.x + 2.033 * yuv.y
    );
    
    return new;
}

feedback buffer_chroma_blur = glsl(crt_chroma_blur, sizeof(buffer_yuv)): full_range(true), hidden(true), map(clamp), synchronize(buffer_yuv);

glsl vec4 crt_final_image(vec2 pos)
{
    vec2 img_sz = sizeof(buffer_in);
    float aspect = img_sz.y/img_sz.x;
    
    /*
        Calculate the position on the CRT tube screen by projecting each pixel 
        pos onto it.
    */
    vec3 screen_pos = vec3(proj_scale * vec2(1, aspect) * (pos-vec2(0.5, 0.5)), screen_dist);
    float hypotenuse = length(screen_pos);

    float sin_screen = screen_pos.y / hypotenuse;
    float cos_screen = screen_pos.x / hypotenuse;
    vec2 offsets = vec2(cos_screen, sin_screen) * vec2(CRT_PROJECTION_RADIUS - hypotenuse);

    vec2 projected_pos = vec2(pos.x, pos.y) - offsets;

    float scanline = abs(cos(pos.y * CRT_SCANLINES * 3.1417/2));

    /*
        Sample three times, one for each colour channel and offset by convergence.
    */
    float r = texture(buffer_chroma_blur, projected_pos * (1 + CRT_WORST_CONVERGENCE/img_sz.x * (1.0 - convergence))).r;
    float g = texture(buffer_chroma_blur, projected_pos).g;
    float b = texture(buffer_chroma_blur, projected_pos * (1 + CRT_WORST_CONVERGENCE/img_sz.x * (1.0 - convergence))).b;
    
    /*
        Impurity calculations, where we muddle together the channels a bit to 
        fake CRT impurity.
    */
    float impurity_scale = (screen_pos.x * screen_pos.x + screen_pos.y * screen_pos.y) * CRT_IMPURITY_CENTER_DISTANCE_SCALE;
    mat3 impurity_mat = mat3(
        0.7,    0.0,    0.2,
        0.3,    0.6,    0.1,
        0.2,    0.2,    0.4
    );
      
    vec3 wet =  scanline * mix(vec3(r,g,b), impurity_mat * vec3(r,g,b), impurity_scale * impurity) * 1.4;

    return vec4(
        srgb_gamma_correct(wet), 
          smoothstep(1.005, 1.0, projected_pos.x) * smoothstep(1.005, 1.0, 1.0-projected_pos.x) 
        * smoothstep(1.005, 1.0, projected_pos.y) * smoothstep(1.005, 1.0, 1.0-projected_pos.y));
}

animation buffer_out = glsl(crt_final_image, sizeof(buffer_chroma_blur));

export png_sequence(buffer_out, "D:\\Code\\Repos\\shaders\\testimgs\\awsdwrf\\pulp-lol?.png", 25, 4.8);
